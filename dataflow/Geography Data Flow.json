{
	"name": "Geography Data Flow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQL_Country_PQ",
						"type": "DatasetReference"
					},
					"name": "sqlCountryPQ"
				},
				{
					"dataset": {
						"referenceName": "VM_Country_PQ",
						"type": "DatasetReference"
					},
					"name": "vmCountryPQ"
				},
				{
					"dataset": {
						"referenceName": "Country_Population_Data",
						"type": "DatasetReference"
					},
					"name": "PopulationData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ODS",
						"type": "DatasetReference"
					},
					"name": "Geography"
				}
			],
			"transformations": [
				{
					"name": "selectCountry"
				},
				{
					"name": "unionCountry"
				},
				{
					"name": "selectDistinctRows"
				},
				{
					"name": "selectColumns"
				},
				{
					"name": "joinOnCountry"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sqlCountryPQ",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> vmCountryPQ",
				"source(output(",
				"          Country as string,",
				"          Population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PopulationData",
				"unionCountry select(mapColumn(",
				"          Country,",
				"          Latitude,",
				"          Longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCountry",
				"sqlCountryPQ, vmCountryPQ union(byName: true)~> unionCountry",
				"selectCountry aggregate(groupBy(Country),",
				"     each(match(name!='Country'), $$ = first($$))) ~> selectDistinctRows",
				"joinOnCountry select(mapColumn(",
				"          Country = PopulationData@Country,",
				"          Population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"PopulationData, selectDistinctRows join(PopulationData@Country == selectDistinctRows@Country,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOnCountry",
				"selectDistinctRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Geography"
			]
		}
	}
}