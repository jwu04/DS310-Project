{
	"name": "Geography Data Flow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQL_Country_PQ",
						"type": "DatasetReference"
					},
					"name": "sqlCountryPQ"
				},
				{
					"dataset": {
						"referenceName": "VM_Country_PQ",
						"type": "DatasetReference"
					},
					"name": "vmCountryPQ"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ODS",
						"type": "DatasetReference"
					},
					"name": "Geography"
				}
			],
			"transformations": [
				{
					"name": "SelectCountry"
				},
				{
					"name": "unionCountry"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> sqlCountryPQ",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> vmCountryPQ",
				"unionCountry select(mapColumn(",
				"          Country,",
				"          Latitude,",
				"          Longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCountry",
				"sqlCountryPQ, vmCountryPQ union(byName: true)~> unionCountry",
				"SelectCountry sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['geography'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Geography"
			]
		}
	}
}