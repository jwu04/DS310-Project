{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-Team10"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Cases Data Flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_Metrics_PQ",
								"type": "DatasetReference"
							},
							"name": "sqlMetricsPQ"
						},
						{
							"dataset": {
								"referenceName": "VM_Metrics_PQ",
								"type": "DatasetReference"
							},
							"name": "vmMetricsPQ",
							"description": "Metrics from VM parquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ODS",
								"type": "DatasetReference"
							},
							"name": "Cases"
						}
					],
					"transformations": [
						{
							"name": "unionCases",
							"description": "Combining rows from metrics sql and metrics vm"
						},
						{
							"name": "selectCases"
						},
						{
							"name": "selectDistinctRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sqlMetricsPQ",
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> vmMetricsPQ",
						"sqlMetricsPQ, vmMetricsPQ union(byName: true)~> unionCases",
						"unionCases select(mapColumn(",
						"          ID,",
						"          Updated,",
						"          Confirmed,",
						"          Confirmed_Change,",
						"          Country_Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCases",
						"selectCases aggregate(groupBy(ID),",
						"     each(match(name!='ID'), $$ = first($$))) ~> selectDistinctRows",
						"selectDistinctRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['cases'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Cases"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dates Data Flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_Dates_PQ",
								"type": "DatasetReference"
							},
							"name": "sqlDatesPQ",
							"description": "grab date data from sql"
						},
						{
							"dataset": {
								"referenceName": "VM_Dates_PQ",
								"type": "DatasetReference"
							},
							"name": "vmDatesPQ",
							"description": "grab date data from vm"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ODS",
								"type": "DatasetReference"
							},
							"name": "Dates",
							"description": "dump data into dates collection"
						}
					],
					"transformations": [
						{
							"name": "selectDates"
						},
						{
							"name": "unionDates",
							"description": "Combining rows from transformation 'datesfromsql' and 'datesfromvm'"
						},
						{
							"name": "selectDistinctRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DateKey as integer,",
						"          FullDate as date,",
						"          isWeekDay as boolean,",
						"          DayOfWeek as integer,",
						"          DayOfMonth as integer,",
						"          DayOfQuarter as integer,",
						"          DayOfYear as integer,",
						"          DayName as string,",
						"          WeekOfYear as integer,",
						"          WeekName as string,",
						"          MonthOfYear as integer,",
						"          MonthName as string,",
						"          CalendarQuarter as integer,",
						"          CalendarQuarterName as string,",
						"          CalendarYear as integer,",
						"          FiscalMonth as integer,",
						"          FiscalMonthName as string,",
						"          FiscalQuarter as integer,",
						"          FiscalQuarterName as string,",
						"          FiscalYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sqlDatesPQ",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> vmDatesPQ",
						"unionDates select(mapColumn(",
						"          FullDate,",
						"          isWeekDay,",
						"          DayName,",
						"          MonthName,",
						"          FiscalQuarterName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDates",
						"sqlDatesPQ, vmDatesPQ union(byName: true)~> unionDates",
						"selectDates aggregate(groupBy(FullDate),",
						"     each(match(name!='FullDate'), $$ = first($$))) ~> selectDistinctRows",
						"selectDistinctRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['dates'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Dates"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Deaths Data Flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_Metrics_PQ",
								"type": "DatasetReference"
							},
							"name": "sqlMetricsPQ"
						},
						{
							"dataset": {
								"referenceName": "VM_Metrics_PQ",
								"type": "DatasetReference"
							},
							"name": "vmMetricsPQ"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ODS",
								"type": "DatasetReference"
							},
							"name": "Deaths"
						}
					],
					"transformations": [
						{
							"name": "unionDeaths"
						},
						{
							"name": "selectDeaths"
						},
						{
							"name": "selectDistinctRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sqlMetricsPQ",
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> vmMetricsPQ",
						"sqlMetricsPQ, vmMetricsPQ union(byName: true)~> unionDeaths",
						"unionDeaths select(mapColumn(",
						"          ID,",
						"          Updated,",
						"          Deaths,",
						"          Deaths_Change,",
						"          Country_Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDeaths",
						"selectDeaths aggregate(groupBy(ID),",
						"     each(match(name!='ID'), $$ = first($$))) ~> selectDistinctRows",
						"selectDistinctRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['deaths'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Deaths"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Geography Data Flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_Country_PQ",
								"type": "DatasetReference"
							},
							"name": "sqlCountryPQ"
						},
						{
							"dataset": {
								"referenceName": "VM_Country_PQ",
								"type": "DatasetReference"
							},
							"name": "vmCountryPQ"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ODS",
								"type": "DatasetReference"
							},
							"name": "Geography"
						}
					],
					"transformations": [
						{
							"name": "selectCountry"
						},
						{
							"name": "unionCountry"
						},
						{
							"name": "selectDistinctRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sqlCountryPQ",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> vmCountryPQ",
						"unionCountry select(mapColumn(",
						"          Country,",
						"          Latitude,",
						"          Longitude",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCountry",
						"sqlCountryPQ, vmCountryPQ union(byName: true)~> unionCountry",
						"selectCountry aggregate(groupBy(Country),",
						"     each(match(name!='Country'), $$ = first($$))) ~> selectDistinctRows",
						"selectDistinctRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['geography'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Geography"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Policy Data Flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Cosmos_Policy_PQ",
								"type": "DatasetReference"
							},
							"name": "policyCosmos",
							"description": "Grabbing Policy from Cosmos Parquet file"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ODS",
								"type": "DatasetReference"
							},
							"name": "Policies",
							"description": "Putting all of Policy data in Policy collection"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          C1_School_closing as double,",
						"          C2_Workplace_closing as double,",
						"          C3_Cancel_public_events as double,",
						"          C4_Restrictions_on_gatherings as double,",
						"          C5_Close_public_transport as double,",
						"          C6_Stay_at_home_requirements as double,",
						"          C7_Restrictions_on_internal_movement as double,",
						"          C8_International_travel_controls as double,",
						"          E2_Debt_contract_relief as double,",
						"          E3_Fiscal_measures as double,",
						"          E4_International_support as double,",
						"          H1_Public_information_campaigns as double,",
						"          H2_Testing_policy as double,",
						"          H3_Contact_tracing as double,",
						"          H7_Vaccination_policy as double,",
						"          H8_Protection_of_elderly_people as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> policyCosmos",
						"policyCosmos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['policies'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Policies"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Recovery Data Flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SQL_Metrics_PQ",
								"type": "DatasetReference"
							},
							"name": "sqlMetricsPQ"
						},
						{
							"dataset": {
								"referenceName": "VM_Metrics_PQ",
								"type": "DatasetReference"
							},
							"name": "vmMetricsPQ"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ODS",
								"type": "DatasetReference"
							},
							"name": "Recoveries"
						}
					],
					"transformations": [
						{
							"name": "selectVM"
						},
						{
							"name": "selectSQL"
						},
						{
							"name": "unionRecoveries"
						},
						{
							"name": "selectDistinctRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> sqlMetricsPQ",
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> vmMetricsPQ",
						"vmMetricsPQ select(mapColumn(",
						"          ID,",
						"          Updated,",
						"          Recovered,",
						"          Recovered_Change,",
						"          Country_Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectVM",
						"sqlMetricsPQ select(mapColumn(",
						"          ID,",
						"          Updated,",
						"          Recovered,",
						"          Recovered_Change,",
						"          Country_Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSQL",
						"selectSQL, selectVM union(byName: false)~> unionRecoveries",
						"unionRecoveries aggregate(groupBy(ID),",
						"     each(match(name!='ID'), $$ = first($$))) ~> selectDistinctRows",
						"selectDistinctRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['recoveries'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Recoveries"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Source Tables to Parquets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy SQL Country",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CountryCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CountryCode",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Latitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 5,
											"precision": 10
										},
										"sink": {
											"name": "Latitude",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "Longitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 5,
											"precision": 10
										},
										"sink": {
											"name": "Longitude",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SQL_Country_Table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Country_PQ",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy SQL Metrics",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy SQL Country",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Updated",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Updated",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "Confirmed",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Confirmed",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Confirmed_Change",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Confirmed_Change",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Deaths",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Deaths",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Deaths_Change",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Deaths_Change",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Recovered",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Recovered",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Recovered_Change",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Recovered_Change",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Latitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 5,
											"precision": 10
										},
										"sink": {
											"name": "Latitude",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "Longitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 5,
											"precision": 10
										},
										"sink": {
											"name": "Longitude",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "ISO2",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ISO2",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ISO3",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ISO3",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Country_Region",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Country_Region",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "load_time",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "load_time",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SQL_Metrics_Table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Metrics_PQ",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy SQL Dates",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy SQL Metrics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DateKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DateKey",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "FullDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "FullDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "isWeekDay",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "isWeekDay",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "DayOfWeek",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DayOfWeek",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "DayOfMonth",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DayOfMonth",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "DayOfQuarter",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DayOfQuarter",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "DayOfYear",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DayOfYear",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "DayName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DayName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "WeekOfYear",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "WeekOfYear",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "WeekName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "WeekName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "MonthOfYear",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MonthOfYear",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "MonthName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "MonthName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CalendarQuarter",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CalendarQuarter",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "CalendarQuarterName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CalendarQuarterName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CalendarYear",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CalendarYear",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "FiscalMonth",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "FiscalMonth",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "FiscalMonthName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FiscalMonthName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "FiscalQuarter",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "FiscalQuarter",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "FiscalQuarterName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FiscalQuarterName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "FiscalYear",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "FiscalYear",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SQL_Date_Table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_Dates_PQ",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Cosmos Policy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbSqlApiSource",
								"preferredRegions": []
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['CountryName']"
										},
										"sink": {
											"name": "CountryName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Date']"
										},
										"sink": {
											"name": "Date",
											"type": "Date"
										}
									},
									{
										"source": {
											"path": "$['C1_School closing']"
										},
										"sink": {
											"name": "C1_School_closing",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C1_Flag']"
										},
										"sink": {
											"name": "C1_Flag",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C2_Workplace closing']"
										},
										"sink": {
											"name": "C2_Workplace_closing",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C2_Flag']"
										},
										"sink": {
											"name": "C2_Flag",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C3_Cancel public events']"
										},
										"sink": {
											"name": "C3_Cancel_public_events",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C3_Flag']"
										},
										"sink": {
											"name": "C3_Flag",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C4_Restrictions on gatherings']"
										},
										"sink": {
											"name": "C4_Restrictions_on_gatherings",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C4_Flag']"
										},
										"sink": {
											"name": "C4_Flag",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C5_Close public transport']"
										},
										"sink": {
											"name": "C5_Close_public_transport",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C5_Flag']"
										},
										"sink": {
											"name": "C5_Flag",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C6_Stay at home requirements']"
										},
										"sink": {
											"name": "C6_Stay_at_home_requirements",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C6_Flag']"
										},
										"sink": {
											"name": "C6_Flag",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C7_Restrictions on internal movement']"
										},
										"sink": {
											"name": "C7_Restrictions_on_internal_movement",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C7_Flag']"
										},
										"sink": {
											"name": "C7_Flag",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['C8_International travel controls']"
										},
										"sink": {
											"name": "C8_International_travel_controls",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['E1_Income support']"
										},
										"sink": {
											"name": "E1_Income_support",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['E1_Flag']"
										},
										"sink": {
											"name": "E1_Flag",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['E2_Debt contract relief']"
										},
										"sink": {
											"name": "E2_Debt_contract_relief",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['E3_Fiscal measures']"
										},
										"sink": {
											"name": "E3_Fiscal_measures",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['E4_International support']"
										},
										"sink": {
											"name": "E4_International_support",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['H1_Public information campaigns']"
										},
										"sink": {
											"name": "H1_Public_information_campaigns",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['H1_Flag']"
										},
										"sink": {
											"name": "H1_Flag",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['H2_Testing policy']"
										},
										"sink": {
											"name": "H2_Testing_policy",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['H3_Contact tracing']"
										},
										"sink": {
											"name": "H3_Contact_tracing",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['H4_Emergency_investment_in_healthcare']"
										},
										"sink": {
											"name": "H4_Emergency_investment_in_healthcare",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['H5_Investment_in_vaccines']"
										},
										"sink": {
											"name": "H5_Investment_in_vaccines",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['H6_Facial_Coverings']"
										},
										"sink": {
											"name": "H6_Facial_Coverings",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['H6_Flag']"
										},
										"sink": {
											"name": "H6_Flag",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['H7_Vaccination policy']"
										},
										"sink": {
											"name": "H7_Vaccination_policy",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['H7_Flag']"
										},
										"sink": {
											"name": "H7_Flag",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['H8_Protection of elderly people']"
										},
										"sink": {
											"name": "H8_Protection_of_elderly_people"
										}
									},
									{
										"source": {
											"path": "$['H8_Flag']"
										},
										"sink": {
											"name": "H8_Flag",
											"type": "Int32"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "Cosmos_Policy_Table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Cosmos_Policy_PQ",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy VM Metrics",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Updated",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Updated",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "Confirmed",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Confirmed",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Confirmed_Change",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Confirmed_Change",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Deaths",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Deaths",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Deaths_Change",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Deaths_Change",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Recovered",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Recovered",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Recovered_Change",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Recovered_Change",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "Latitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 5,
											"precision": 10
										},
										"sink": {
											"name": "Latitude",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "Longitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 5,
											"precision": 10
										},
										"sink": {
											"name": "Longitude",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "ISO2",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ISO2",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ISO3",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ISO3",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Country_Region",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Country_Region",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "load_time",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "load_time",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VM_Metrics_Table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "VM_Metrics_PQ",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy VM Country",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy VM Metrics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Country",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Country",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CountryCode",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CountryCode",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Latitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 5,
											"precision": 10
										},
										"sink": {
											"name": "Latitude",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "Longitude",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 5,
											"precision": 10
										},
										"sink": {
											"name": "Longitude",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VM_Country_Table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "VM_Country_PQ",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy VM Dates",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy VM Country",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DateKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DateKey",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "FullDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "FullDate",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "isWeekDay",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "isWeekDay",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "DayOfWeek",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DayOfWeek",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "DayOfMonth",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DayOfMonth",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "DayOfQuarter",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DayOfQuarter",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "DayOfYear",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DayOfYear",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "DayName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DayName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "WeekOfYear",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "WeekOfYear",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "WeekName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "WeekName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "MonthOfYear",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MonthOfYear",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "MonthName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "MonthName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CalendarQuarter",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CalendarQuarter",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "CalendarQuarterName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "CalendarQuarterName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "CalendarYear",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CalendarYear",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "FiscalMonth",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "FiscalMonth",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "FiscalMonthName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FiscalMonthName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "FiscalQuarter",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "FiscalQuarter",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "FiscalQuarterName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "FiscalQuarterName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "FiscalYear",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "FiscalYear",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "VM_Date_Table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "VM_Dates_PQ",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-09T18:35:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquets to ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Cases",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Cases Data Flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sqlMetricsPQ": {},
									"vmMetricsPQ": {},
									"Cases": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dates",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dates Data Flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sqlDatesPQ": {},
									"vmDatesPQ": {},
									"Dates": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Deaths",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Deaths Data Flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sqlMetricsPQ": {},
									"vmMetricsPQ": {},
									"Deaths": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Policies",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Policy Data Flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"policyCosmos": {},
									"Policies": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Recoveries",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Recovery Data Flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sqlMetricsPQ": {},
									"vmMetricsPQ": {},
									"Recoveries": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Geography",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Cases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Geography Data Flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sqlCountryPQ": {},
									"vmCountryPQ": {},
									"Geography": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Cases Data Flow')]",
				"[concat(variables('factoryId'), '/dataflows/Dates Data Flow')]",
				"[concat(variables('factoryId'), '/dataflows/Deaths Data Flow')]",
				"[concat(variables('factoryId'), '/dataflows/Policy Data Flow')]",
				"[concat(variables('factoryId'), '/dataflows/Recovery Data Flow')]",
				"[concat(variables('factoryId'), '/dataflows/Geography Data Flow')]"
			]
		}
	]
}